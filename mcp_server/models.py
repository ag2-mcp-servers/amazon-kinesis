# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:15:10+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class BooleanObject(RootModel[bool]):
    root: bool


class ConsumerARN(
    RootModel[
        constr(
            pattern=r'^(arn):aws.*:kinesis:.*:\d{12}:.*stream\/[a-zA-Z0-9_.-]+\/consumer\/[a-zA-Z0-9_.-]+:[0-9]+',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^(arn):aws.*:kinesis:.*:\d{12}:.*stream\/[a-zA-Z0-9_.-]+\/consumer\/[a-zA-Z0-9_.-]+:[0-9]+',
        min_length=1,
        max_length=2048,
    )


class ConsumerCountObject(RootModel[conint(ge=0, le=1000000)]):
    root: conint(ge=0, le=1000000)


class ConsumerName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=128)


class ConsumerStatus(Enum):
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    ACTIVE = 'ACTIVE'


class Data(RootModel[constr(min_length=0, max_length=1048576)]):
    root: constr(min_length=0, max_length=1048576)


class DescribeLimitsInput(BaseModel):
    pass


class DescribeStreamInputLimit(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class EncryptionType(Enum):
    NONE = 'NONE'
    KMS = 'KMS'


class ErrorCode(RootModel[str]):
    root: str


class ErrorMessage(RootModel[str]):
    root: str


class ExpiredIteratorException(RootModel[Any]):
    root: Any


class ExpiredNextTokenException(RootModel[Any]):
    root: Any


class GetRecordsInputLimit(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class HashKey(RootModel[constr(pattern=r'0|([1-9]\d{0,38})')]):
    root: constr(pattern=r'0|([1-9]\d{0,38})')


class HashKeyRange(BaseModel):
    EndingHashKey: HashKey
    StartingHashKey: HashKey


class InvalidArgumentException(RootModel[Any]):
    root: Any


class KMSAccessDeniedException(RootModel[Any]):
    root: Any


class KMSDisabledException(RootModel[Any]):
    root: Any


class KMSInvalidStateException(RootModel[Any]):
    root: Any


class KMSNotFoundException(RootModel[Any]):
    root: Any


class KMSOptInRequired(RootModel[Any]):
    root: Any


class KMSThrottlingException(RootModel[Any]):
    root: Any


class KeyId(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class LimitExceededException(RootModel[Any]):
    root: Any


class ListShardsInputLimit(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class ListStreamConsumersInputLimit(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class ListStreamsInputLimit(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class ListTagsForStreamInputLimit(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class MetricsName(Enum):
    IncomingBytes = 'IncomingBytes'
    IncomingRecords = 'IncomingRecords'
    OutgoingBytes = 'OutgoingBytes'
    OutgoingRecords = 'OutgoingRecords'
    WriteProvisionedThroughputExceeded = 'WriteProvisionedThroughputExceeded'
    ReadProvisionedThroughputExceeded = 'ReadProvisionedThroughputExceeded'
    IteratorAgeMilliseconds = 'IteratorAgeMilliseconds'
    ALL = 'ALL'


class MetricsNameList(RootModel[List[MetricsName]]):
    root: List[MetricsName] = Field(..., max_length=7, min_length=1)


class MillisBehindLatest(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class NextToken(RootModel[constr(min_length=1, max_length=1048576)]):
    root: constr(min_length=1, max_length=1048576)


class OnDemandStreamCountLimitObject(RootModel[conint(ge=0, le=1000000)]):
    root: conint(ge=0, le=1000000)


class OnDemandStreamCountObject(RootModel[conint(ge=0, le=1000000)]):
    root: conint(ge=0, le=1000000)


class PartitionKey(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class PositiveIntegerObject(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ProvisionedThroughputExceededException(RootModel[Any]):
    root: Any


class PutRecordsRequestEntry(BaseModel):
    Data_1: Data = Field(..., alias='Data')
    ExplicitHashKey: Optional[HashKey] = None
    PartitionKey_1: PartitionKey = Field(..., alias='PartitionKey')


class PutRecordsRequestEntryList(RootModel[List[PutRecordsRequestEntry]]):
    root: List[PutRecordsRequestEntry] = Field(..., max_length=500, min_length=1)


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RetentionPeriodHours(RootModel[int]):
    root: int


class ScalingType(Enum):
    UNIFORM_SCALING = 'UNIFORM_SCALING'


class SequenceNumber(RootModel[constr(pattern=r'0|([1-9]\d{0,128})')]):
    root: constr(pattern=r'0|([1-9]\d{0,128})')


class SequenceNumberRange(BaseModel):
    EndingSequenceNumber: Optional[SequenceNumber] = None
    StartingSequenceNumber: SequenceNumber


class ShardCountObject(RootModel[conint(ge=0, le=1000000)]):
    root: conint(ge=0, le=1000000)


class ShardFilterType(Enum):
    AFTER_SHARD_ID = 'AFTER_SHARD_ID'
    AT_TRIM_HORIZON = 'AT_TRIM_HORIZON'
    FROM_TRIM_HORIZON = 'FROM_TRIM_HORIZON'
    AT_LATEST = 'AT_LATEST'
    AT_TIMESTAMP = 'AT_TIMESTAMP'
    FROM_TIMESTAMP = 'FROM_TIMESTAMP'


class ShardId(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=128)


class ShardIdList(RootModel[List[ShardId]]):
    root: List[ShardId]


class ShardIterator(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class ShardIteratorType(Enum):
    AT_SEQUENCE_NUMBER = 'AT_SEQUENCE_NUMBER'
    AFTER_SEQUENCE_NUMBER = 'AFTER_SEQUENCE_NUMBER'
    TRIM_HORIZON = 'TRIM_HORIZON'
    LATEST = 'LATEST'
    AT_TIMESTAMP = 'AT_TIMESTAMP'


class StreamARN(
    RootModel[
        constr(
            pattern=r'arn:aws.*:kinesis:.*:\d{12}:stream/\S+',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws.*:kinesis:.*:\d{12}:stream/\S+', min_length=1, max_length=2048
    )


class StreamMode(Enum):
    PROVISIONED = 'PROVISIONED'
    ON_DEMAND = 'ON_DEMAND'


class StreamModeDetails(BaseModel):
    StreamMode_1: StreamMode = Field(..., alias='StreamMode')


class StreamName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=128)


class StreamNameList(RootModel[List[StreamName]]):
    root: List[StreamName]


class StreamStatus(Enum):
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    ACTIVE = 'ACTIVE'
    UPDATING = 'UPDATING'


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class Timestamp(RootModel[datetime]):
    root: datetime


class UpdateShardCountInput(BaseModel):
    ScalingType_1: ScalingType = Field(..., alias='ScalingType')
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')
    TargetShardCount: PositiveIntegerObject


class UpdateShardCountOutput(BaseModel):
    CurrentShardCount: Optional[PositiveIntegerObject] = None
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')
    TargetShardCount: Optional[PositiveIntegerObject] = None


class UpdateStreamModeInput(BaseModel):
    StreamARN_1: StreamARN = Field(..., alias='StreamARN')
    StreamModeDetails_1: StreamModeDetails = Field(..., alias='StreamModeDetails')


class ValidationException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    Kinesis_20131202_AddTagsToStream = 'Kinesis_20131202.AddTagsToStream'


class XAmzTarget1(Enum):
    Kinesis_20131202_CreateStream = 'Kinesis_20131202.CreateStream'


class XAmzTarget2(Enum):
    Kinesis_20131202_DecreaseStreamRetentionPeriod = (
        'Kinesis_20131202.DecreaseStreamRetentionPeriod'
    )


class XAmzTarget3(Enum):
    Kinesis_20131202_DeleteStream = 'Kinesis_20131202.DeleteStream'


class XAmzTarget4(Enum):
    Kinesis_20131202_DeregisterStreamConsumer = (
        'Kinesis_20131202.DeregisterStreamConsumer'
    )


class XAmzTarget5(Enum):
    Kinesis_20131202_DescribeLimits = 'Kinesis_20131202.DescribeLimits'


class XAmzTarget6(Enum):
    Kinesis_20131202_DescribeStream = 'Kinesis_20131202.DescribeStream'


class XAmzTarget7(Enum):
    Kinesis_20131202_DescribeStreamConsumer = 'Kinesis_20131202.DescribeStreamConsumer'


class XAmzTarget8(Enum):
    Kinesis_20131202_DescribeStreamSummary = 'Kinesis_20131202.DescribeStreamSummary'


class XAmzTarget9(Enum):
    Kinesis_20131202_DisableEnhancedMonitoring = (
        'Kinesis_20131202.DisableEnhancedMonitoring'
    )


class XAmzTarget10(Enum):
    Kinesis_20131202_EnableEnhancedMonitoring = (
        'Kinesis_20131202.EnableEnhancedMonitoring'
    )


class XAmzTarget11(Enum):
    Kinesis_20131202_GetRecords = 'Kinesis_20131202.GetRecords'


class XAmzTarget12(Enum):
    Kinesis_20131202_GetShardIterator = 'Kinesis_20131202.GetShardIterator'


class XAmzTarget13(Enum):
    Kinesis_20131202_IncreaseStreamRetentionPeriod = (
        'Kinesis_20131202.IncreaseStreamRetentionPeriod'
    )


class XAmzTarget14(Enum):
    Kinesis_20131202_ListShards = 'Kinesis_20131202.ListShards'


class XAmzTarget15(Enum):
    Kinesis_20131202_ListStreamConsumers = 'Kinesis_20131202.ListStreamConsumers'


class XAmzTarget16(Enum):
    Kinesis_20131202_ListStreams = 'Kinesis_20131202.ListStreams'


class XAmzTarget17(Enum):
    Kinesis_20131202_ListTagsForStream = 'Kinesis_20131202.ListTagsForStream'


class XAmzTarget18(Enum):
    Kinesis_20131202_MergeShards = 'Kinesis_20131202.MergeShards'


class XAmzTarget19(Enum):
    Kinesis_20131202_PutRecord = 'Kinesis_20131202.PutRecord'


class XAmzTarget20(Enum):
    Kinesis_20131202_PutRecords = 'Kinesis_20131202.PutRecords'


class XAmzTarget21(Enum):
    Kinesis_20131202_RegisterStreamConsumer = 'Kinesis_20131202.RegisterStreamConsumer'


class XAmzTarget22(Enum):
    Kinesis_20131202_RemoveTagsFromStream = 'Kinesis_20131202.RemoveTagsFromStream'


class XAmzTarget23(Enum):
    Kinesis_20131202_SplitShard = 'Kinesis_20131202.SplitShard'


class XAmzTarget24(Enum):
    Kinesis_20131202_StartStreamEncryption = 'Kinesis_20131202.StartStreamEncryption'


class XAmzTarget25(Enum):
    Kinesis_20131202_StopStreamEncryption = 'Kinesis_20131202.StopStreamEncryption'


class XAmzTarget26(Enum):
    Kinesis_20131202_UpdateShardCount = 'Kinesis_20131202.UpdateShardCount'


class XAmzTarget27(Enum):
    Kinesis_20131202_UpdateStreamMode = 'Kinesis_20131202.UpdateStreamMode'


class ChildShard(BaseModel):
    HashKeyRange_1: HashKeyRange = Field(..., alias='HashKeyRange')
    ParentShards: ShardIdList
    ShardId_1: ShardId = Field(..., alias='ShardId')


class ChildShardList(RootModel[List[ChildShard]]):
    root: List[ChildShard]


class Consumer(BaseModel):
    ConsumerARN_1: ConsumerARN = Field(..., alias='ConsumerARN')
    ConsumerCreationTimestamp: Timestamp
    ConsumerName_1: ConsumerName = Field(..., alias='ConsumerName')
    ConsumerStatus_1: ConsumerStatus = Field(..., alias='ConsumerStatus')


class ConsumerDescription(BaseModel):
    ConsumerARN_1: ConsumerARN = Field(..., alias='ConsumerARN')
    ConsumerCreationTimestamp: Timestamp
    ConsumerName_1: ConsumerName = Field(..., alias='ConsumerName')
    ConsumerStatus_1: ConsumerStatus = Field(..., alias='ConsumerStatus')
    StreamARN_1: StreamARN = Field(..., alias='StreamARN')


class ConsumerList(RootModel[List[Consumer]]):
    root: List[Consumer]


class CreateStreamInput(BaseModel):
    ShardCount: Optional[PositiveIntegerObject] = None
    StreamModeDetails_1: Optional[StreamModeDetails] = Field(
        None, alias='StreamModeDetails'
    )
    StreamName_1: StreamName = Field(..., alias='StreamName')


class DecreaseStreamRetentionPeriodInput(BaseModel):
    RetentionPeriodHours_1: RetentionPeriodHours = Field(
        ..., alias='RetentionPeriodHours'
    )
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class DeleteStreamInput(BaseModel):
    EnforceConsumerDeletion: Optional[BooleanObject] = None
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class DeregisterStreamConsumerInput(BaseModel):
    ConsumerARN_1: Optional[ConsumerARN] = Field(None, alias='ConsumerARN')
    ConsumerName_1: Optional[ConsumerName] = Field(None, alias='ConsumerName')
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')


class DescribeLimitsOutput(BaseModel):
    OnDemandStreamCount: OnDemandStreamCountObject
    OnDemandStreamCountLimit: OnDemandStreamCountLimitObject
    OpenShardCount: ShardCountObject
    ShardLimit: ShardCountObject


class DescribeStreamConsumerInput(BaseModel):
    ConsumerARN_1: Optional[ConsumerARN] = Field(None, alias='ConsumerARN')
    ConsumerName_1: Optional[ConsumerName] = Field(None, alias='ConsumerName')
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')


class DescribeStreamConsumerOutput(BaseModel):
    ConsumerDescription_1: ConsumerDescription = Field(..., alias='ConsumerDescription')


class DescribeStreamInput(BaseModel):
    ExclusiveStartShardId: Optional[ShardId] = None
    Limit: Optional[DescribeStreamInputLimit] = None
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class DescribeStreamSummaryInput(BaseModel):
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class DisableEnhancedMonitoringInput(BaseModel):
    ShardLevelMetrics: MetricsNameList
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class EnableEnhancedMonitoringInput(BaseModel):
    ShardLevelMetrics: MetricsNameList
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class EnhancedMetrics(BaseModel):
    ShardLevelMetrics: Optional[MetricsNameList] = None


class EnhancedMonitoringList(RootModel[List[EnhancedMetrics]]):
    root: List[EnhancedMetrics]


class EnhancedMonitoringOutput(BaseModel):
    CurrentShardLevelMetrics: Optional[MetricsNameList] = None
    DesiredShardLevelMetrics: Optional[MetricsNameList] = None
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class GetRecordsInput(BaseModel):
    Limit: Optional[GetRecordsInputLimit] = None
    ShardIterator_1: ShardIterator = Field(..., alias='ShardIterator')
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')


class GetShardIteratorInput(BaseModel):
    ShardId_1: ShardId = Field(..., alias='ShardId')
    ShardIteratorType_1: ShardIteratorType = Field(..., alias='ShardIteratorType')
    StartingSequenceNumber: Optional[SequenceNumber] = None
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class GetShardIteratorOutput(BaseModel):
    ShardIterator_1: Optional[ShardIterator] = Field(None, alias='ShardIterator')


class IncreaseStreamRetentionPeriodInput(BaseModel):
    RetentionPeriodHours_1: RetentionPeriodHours = Field(
        ..., alias='RetentionPeriodHours'
    )
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class ListStreamConsumersInput(BaseModel):
    MaxResults: Optional[ListStreamConsumersInputLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StreamARN_1: StreamARN = Field(..., alias='StreamARN')
    StreamCreationTimestamp: Optional[Timestamp] = None


class ListStreamConsumersOutput(BaseModel):
    Consumers: Optional[ConsumerList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListStreamsInput(BaseModel):
    ExclusiveStartStreamName: Optional[StreamName] = None
    Limit: Optional[ListStreamsInputLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForStreamInput(BaseModel):
    ExclusiveStartTagKey: Optional[TagKey] = None
    Limit: Optional[ListTagsForStreamInputLimit] = None
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class MergeShardsInput(BaseModel):
    AdjacentShardToMerge: ShardId
    ShardToMerge: ShardId
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class PutRecordInput(BaseModel):
    Data_1: Data = Field(..., alias='Data')
    ExplicitHashKey: Optional[HashKey] = None
    PartitionKey_1: PartitionKey = Field(..., alias='PartitionKey')
    SequenceNumberForOrdering: Optional[SequenceNumber] = None
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class PutRecordOutput(BaseModel):
    EncryptionType_1: Optional[EncryptionType] = Field(None, alias='EncryptionType')
    SequenceNumber_1: SequenceNumber = Field(..., alias='SequenceNumber')
    ShardId_1: ShardId = Field(..., alias='ShardId')


class PutRecordsInput(BaseModel):
    Records: PutRecordsRequestEntryList
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class PutRecordsResultEntry(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    SequenceNumber_1: Optional[SequenceNumber] = Field(None, alias='SequenceNumber')
    ShardId_1: Optional[ShardId] = Field(None, alias='ShardId')


class PutRecordsResultEntryList(RootModel[List[PutRecordsResultEntry]]):
    root: List[PutRecordsResultEntry] = Field(..., max_length=500, min_length=1)


class Record(BaseModel):
    ApproximateArrivalTimestamp: Optional[Timestamp] = None
    Data_1: Data = Field(..., alias='Data')
    EncryptionType_1: Optional[EncryptionType] = Field(None, alias='EncryptionType')
    PartitionKey_1: PartitionKey = Field(..., alias='PartitionKey')
    SequenceNumber_1: SequenceNumber = Field(..., alias='SequenceNumber')


class RecordList(RootModel[List[Record]]):
    root: List[Record]


class RegisterStreamConsumerInput(BaseModel):
    ConsumerName_1: ConsumerName = Field(..., alias='ConsumerName')
    StreamARN_1: StreamARN = Field(..., alias='StreamARN')


class RegisterStreamConsumerOutput(BaseModel):
    Consumer_1: Consumer = Field(..., alias='Consumer')


class RemoveTagsFromStreamInput(BaseModel):
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')
    TagKeys: TagKeyList


class Shard(BaseModel):
    AdjacentParentShardId: Optional[ShardId] = None
    HashKeyRange_1: HashKeyRange = Field(..., alias='HashKeyRange')
    ParentShardId: Optional[ShardId] = None
    SequenceNumberRange_1: SequenceNumberRange = Field(..., alias='SequenceNumberRange')
    ShardId_1: ShardId = Field(..., alias='ShardId')


class ShardFilter(BaseModel):
    ShardId_1: Optional[ShardId] = Field(None, alias='ShardId')
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')
    Type: ShardFilterType


class ShardList(RootModel[List[Shard]]):
    root: List[Shard]


class SplitShardInput(BaseModel):
    NewStartingHashKey: HashKey
    ShardToSplit: ShardId
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class StartStreamEncryptionInput(BaseModel):
    EncryptionType_1: EncryptionType = Field(..., alias='EncryptionType')
    KeyId_1: KeyId = Field(..., alias='KeyId')
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class StopStreamEncryptionInput(BaseModel):
    EncryptionType_1: EncryptionType = Field(..., alias='EncryptionType')
    KeyId_1: KeyId = Field(..., alias='KeyId')
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class StreamDescription(BaseModel):
    EncryptionType_1: Optional[EncryptionType] = Field(None, alias='EncryptionType')
    EnhancedMonitoring: EnhancedMonitoringList
    HasMoreShards: BooleanObject
    KeyId_1: Optional[KeyId] = Field(None, alias='KeyId')
    RetentionPeriodHours_1: RetentionPeriodHours = Field(
        ..., alias='RetentionPeriodHours'
    )
    Shards: ShardList
    StreamARN_1: StreamARN = Field(..., alias='StreamARN')
    StreamCreationTimestamp: Timestamp
    StreamModeDetails_1: Optional[StreamModeDetails] = Field(
        None, alias='StreamModeDetails'
    )
    StreamName_1: StreamName = Field(..., alias='StreamName')
    StreamStatus_1: StreamStatus = Field(..., alias='StreamStatus')


class StreamDescriptionSummary(BaseModel):
    ConsumerCount: Optional[ConsumerCountObject] = None
    EncryptionType_1: Optional[EncryptionType] = Field(None, alias='EncryptionType')
    EnhancedMonitoring: EnhancedMonitoringList
    KeyId_1: Optional[KeyId] = Field(None, alias='KeyId')
    OpenShardCount: ShardCountObject
    RetentionPeriodHours_1: RetentionPeriodHours = Field(
        ..., alias='RetentionPeriodHours'
    )
    StreamARN_1: StreamARN = Field(..., alias='StreamARN')
    StreamCreationTimestamp: Timestamp
    StreamModeDetails_1: Optional[StreamModeDetails] = Field(
        None, alias='StreamModeDetails'
    )
    StreamName_1: StreamName = Field(..., alias='StreamName')
    StreamStatus_1: StreamStatus = Field(..., alias='StreamStatus')


class StreamSummary(BaseModel):
    StreamARN_1: StreamARN = Field(..., alias='StreamARN')
    StreamCreationTimestamp: Optional[Timestamp] = None
    StreamModeDetails_1: Optional[StreamModeDetails] = Field(
        None, alias='StreamModeDetails'
    )
    StreamName_1: StreamName = Field(..., alias='StreamName')
    StreamStatus_1: StreamStatus = Field(..., alias='StreamStatus')


class StreamSummaryList(RootModel[List[StreamSummary]]):
    root: List[StreamSummary]


class Tag(BaseModel):
    Key: TagKey
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class AddTagsToStreamInput(BaseModel):
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')
    Tags: TagMap


class DescribeStreamOutput(BaseModel):
    StreamDescription_1: StreamDescription = Field(..., alias='StreamDescription')


class DescribeStreamSummaryOutput(BaseModel):
    StreamDescriptionSummary_1: StreamDescriptionSummary = Field(
        ..., alias='StreamDescriptionSummary'
    )


class GetRecordsOutput(BaseModel):
    ChildShards: Optional[ChildShardList] = None
    MillisBehindLatest_1: Optional[MillisBehindLatest] = Field(
        None, alias='MillisBehindLatest'
    )
    NextShardIterator: Optional[ShardIterator] = None
    Records: RecordList


class ListShardsInput(BaseModel):
    ExclusiveStartShardId: Optional[ShardId] = None
    MaxResults: Optional[ListShardsInputLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ShardFilter_1: Optional[ShardFilter] = Field(None, alias='ShardFilter')
    StreamARN_1: Optional[StreamARN] = Field(None, alias='StreamARN')
    StreamCreationTimestamp: Optional[Timestamp] = None
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class ListShardsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Shards: Optional[ShardList] = None


class ListStreamsOutput(BaseModel):
    HasMoreStreams: BooleanObject
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StreamNames: StreamNameList
    StreamSummaries: Optional[StreamSummaryList] = None


class ListTagsForStreamOutput(BaseModel):
    HasMoreTags: BooleanObject
    Tags: TagList


class PutRecordsOutput(BaseModel):
    EncryptionType_1: Optional[EncryptionType] = Field(None, alias='EncryptionType')
    FailedRecordCount: Optional[PositiveIntegerObject] = None
    Records: PutRecordsResultEntryList
